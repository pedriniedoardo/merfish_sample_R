library(remotes)
renv::init()
library(remotes)
library(Seurat)
library(future)
plan("multisession", workers = 10)
# Loading segmentations is a slow process and multi processing with the future pacakge is
# recommended
vizgen.obj <- LoadVizgen(data.dir = "../merfish/data/mouse_brain_map/BrainReceptorShowcase/Slice1/Replicate1/", fov = "s2r1")
remotes::install_github("satijalab/seurat", "feat/imaging")
library(remotes)
library(Seurat)
library(future)
plan("multisession", workers = 10)
# Loading segmentations is a slow process and multi processing with the future pacakge is
# recommended
vizgen.obj <- LoadVizgen(data.dir = "../merfish/data/mouse_brain_map/BrainReceptorShowcase/Slice1/Replicate1/", fov = "s2r1")
# library(remotes)
# remotes::install_github("satijalab/seurat", "feat/imaging")
library(Seurat)
library(future)
library(hdf5r)
library(tidyverse)
plan("multisession", workers = 10)
vizgen.obj <- LoadVizgen(data.dir = "../data/mouse_brain_map/BrainReceptorShowcase/Slice2/Replicate1/", fov = "s2r1")
# The next pieces of information are specific to imaging assays, and is stored in the images slot of the resulting Seurat object:
# Cell Centroids: The spatial coordinates marking the centroid for each cell being profiled
# Get the center position of each centroid. There is one row per cell in this dataframe.
head(GetTissueCoordinates(vizgen.obj[["s2r1"]][["centroids"]]))
# Cell Segmentation Boundaries: The spatial coordinates that describe the polygon segmentation of each single cell
# Get the coordinates for each segmentation vertice. Each cell will have a variable number of
# vertices describing its shape.
head(GetTissueCoordinates(vizgen.obj[["s2r1"]][["segmentation"]]))
# Molecule positions: The spatial coordinates for each individual molecule that was detected during the multiplexed smFISH experiment.
# Fetch molecules positions for Chrm1
head(FetchData(vizgen.obj[["s2r1"]][["molecules"]], vars = "Chrm1"))
# Preprocessing and unsupervised analysis ---------------------------------
# We start by performing a standard unsupervised clustering analysis, essentially first treating the dataset as an scRNA-seq experiment. We use SCTransform-based normalization, though we slightly modify the default clipping parameters to mitigate the effect of outliers that we occasionally observe in smFISH experiments. After normalization, we can run dimensional reduction and clustering.
vizgen.obj <- SCTransform(vizgen.obj, assay = "Vizgen", clip.range = c(-10, 10), ) %>%
RunPCA(npcs = 30, features = rownames(vizgen.obj)) %>%
RunUMAP(dims = 1:30) %>%
FindNeighbors(reduction = "pca", dims = 1:30) %>%
FindClusters(resolution = 0.3)
# print the object
vizgen.obj
# We can then visualize the results of the clustering either in UMAP space (with DimPlot()) or overlaid on the image with ImageDimPlot().
DimPlot(vizgen.obj, reduction = "umap",label = T,repel = T)
# We can then visualize the results of the clustering either in UMAP space (with DimPlot()) or overlaid on the image with ImageDimPlot().
DimPlot(vizgen.obj, reduction = "umap",label = T,repel = T)
ImageDimPlot(vizgen.obj, fov = "s2r1", cols = "polychrome", axes = TRUE)
# library(remotes)
# remotes::install_github("satijalab/seurat", "feat/imaging")
library(Seurat)
library(future)
library(hdf5r)
library(tidyverse)
plan("multisession", workers = 10)
vizgen.obj <- LoadVizgen(data.dir = "../data/mouse_brain_map/BrainReceptorShowcase/Slice2/Replicate1/", fov = "s2r1")
# The next pieces of information are specific to imaging assays, and is stored in the images slot of the resulting Seurat object:
# Cell Centroids: The spatial coordinates marking the centroid for each cell being profiled
# Get the center position of each centroid. There is one row per cell in this dataframe.
head(GetTissueCoordinates(vizgen.obj[["s2r1"]][["centroids"]]))
# Cell Segmentation Boundaries: The spatial coordinates that describe the polygon segmentation of each single cell
# Get the coordinates for each segmentation vertice. Each cell will have a variable number of
# vertices describing its shape.
head(GetTissueCoordinates(vizgen.obj[["s2r1"]][["segmentation"]]))
# Molecule positions: The spatial coordinates for each individual molecule that was detected during the multiplexed smFISH experiment.
# Fetch molecules positions for Chrm1
head(FetchData(vizgen.obj[["s2r1"]][["molecules"]], vars = "Chrm1"))
# Preprocessing and unsupervised analysis ---------------------------------
# We start by performing a standard unsupervised clustering analysis, essentially first treating the dataset as an scRNA-seq experiment. We use SCTransform-based normalization, though we slightly modify the default clipping parameters to mitigate the effect of outliers that we occasionally observe in smFISH experiments. After normalization, we can run dimensional reduction and clustering.
vizgen.obj <- SCTransform(vizgen.obj, assay = "Vizgen", clip.range = c(-10, 10), ) %>%
RunPCA(npcs = 30, features = rownames(vizgen.obj)) %>%
RunUMAP(dims = 1:30) %>%
FindNeighbors(reduction = "pca", dims = 1:30) %>%
FindClusters(resolution = 0.3)
# print the object
vizgen.obj
# We can then visualize the results of the clustering either in UMAP space (with DimPlot()) or overlaid on the image with ImageDimPlot().
DimPlot(vizgen.obj, reduction = "umap",label = T,repel = T)
ggsave("out/image/UMAP_s2r1.png",width = 8,height = 8)
ggsave("out/image/UMAP_s2r1.pdf",width = 8,height = 8)
ImageDimPlot(vizgen.obj, fov = "s2r1", cols = "polychrome", axes = TRUE)
ggsave("out/image/OverlayCluster_s2r1.png",width = 8,height = 8)
ggsave("out/image/OverlayCluster_s2r1.pdf",width = 8,height = 8)
library(Seurat)
library(future)
library(hdf5r)
library(tidyverse)
plan("multisession", workers = 10)
# Mouse Brain: Vizgen MERSCOPE --------------------------------------------
# This dataset was produced using the Vizgen MERSCOPE system, which utilizes the MERFISH technology. The total dataset is available for public download, and contains nine samples (three full coronal slices of the mouse brain, with three biological replicates per slice). The gene panel consists of 483 gene targets, representing known anonical cell type markers, nonsensory G-Protein coupled receptors (GPCRs), and Receptor Tyrosine Kinases (RTKs). In this vignette, we analyze one of the samples - slice 2, replicate 1. The median number of transcripts detected in each cell is 206.
# First, we read in the dataset and create a Seurat object.
# We use the LoadVizgen() function, which we have written to read in the output of the Vizgen analysis pipeline. The resulting Seurat object contains the following information:
#
#   A count matrix, indicating the number of observed molecules for each of the 483 transcripts in each cell. This matrix is analogous to a count matrix in scRNA-seq, and is stored by default in the RNA assay of the Seurat object
# Loading segmentations is a slow process and multi processing with the future pacakge is
# recommended
vizgen.obj <- LoadVizgen(data.dir = "../data/mouse_brain_map/BrainReceptorShowcase/Slice2/Replicate1/", fov = "s2r1")
# The next pieces of information are specific to imaging assays, and is stored in the images slot of the resulting Seurat object:
# Cell Centroids: The spatial coordinates marking the centroid for each cell being profiled
# Get the center position of each centroid. There is one row per cell in this dataframe.
head(GetTissueCoordinates(vizgen.obj[["s2r1"]][["centroids"]]))
# Cell Segmentation Boundaries: The spatial coordinates that describe the polygon segmentation of each single cell
# Get the coordinates for each segmentation vertice. Each cell will have a variable number of
# vertices describing its shape.
head(GetTissueCoordinates(vizgen.obj[["s2r1"]][["segmentation"]]))
# Molecule positions: The spatial coordinates for each individual molecule that was detected during the multiplexed smFISH experiment.
# Fetch molecules positions for Chrm1
head(FetchData(vizgen.obj[["s2r1"]][["molecules"]], vars = "Chrm1"))
# Preprocessing and unsupervised analysis ---------------------------------
# We start by performing a standard unsupervised clustering analysis, essentially first treating the dataset as an scRNA-seq experiment. We use SCTransform-based normalization, though we slightly modify the default clipping parameters to mitigate the effect of outliers that we occasionally observe in smFISH experiments. After normalization, we can run dimensional reduction and clustering.
vizgen.obj <- SCTransform(vizgen.obj, assay = "Vizgen", clip.range = c(-10, 10), ) %>%
RunPCA(npcs = 30, features = rownames(vizgen.obj)) %>%
RunUMAP(dims = 1:30) %>%
FindNeighbors(reduction = "pca", dims = 1:30) %>%
FindClusters(resolution = 0.3)
# print the object
vizgen.obj
# We can then visualize the results of the clustering either in UMAP space (with DimPlot()) or overlaid on the image with ImageDimPlot().
DimPlot(vizgen.obj, reduction = "umap",label = T,repel = T)
ggsave("out/image/UMAP_s2r1.png",width = 8,height = 8)
ggsave("out/image/UMAP_s2r1.pdf",width = 8,height = 8)
